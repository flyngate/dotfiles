#!/usr/bin/env python3

from sys import argv
from os.path import expanduser, join
from datetime import datetime
import subprocess
import argparse
import tomllib
from shutil import which

CONFIG_PATH_RAW = '~/.config/backups/config'
CONFIG_PATH = expanduser(CONFIG_PATH_RAW)
BACKUPS_PATH = expanduser('~/.backups/')
OBSIDIAN_PATH = expanduser('~/Documents/obsidian/')
REMOTE_BACKUPS_PATH = '~/.backups'
GOOGLE_DRIVE_BACKUPS_PATH = 'backups'
ASCII = """ _________________
| | ___________ |o|
| | ___________ | |
| | ___________ | |
| | ___________ | |
| |_____________| |
|     _______     |
|    |       |   ||
| DD |       |   V|
|____|_______|____|
        """
USAGE = f"""config file: {CONFIG_PATH_RAW}

backups archive      - Archive obsidian voults to backups directory
        sync ssh     - Sync backups with a remote server over SSH
        sync drive   - Sync backups with Google Drive"""


class Config:
    archive_password: str = ''
    ssh_remote: str = ''

    @classmethod
    def load(cls, path):
        try:
            with open(path, 'rb') as f:
                config = tomllib.load(f)
                cls.archive_password = config.get('archive_password', '')
                cls.ssh_remote = config.get('ssh_remote', '')
        except IOError:
            pass


def check_dependencies(*names):
    for name in names:
        if which(name) is None:
            print(f'"{name}" command is missing.')
            exit(1)


def shell(command, verbose=True):
    if verbose:
        print(command)

        return subprocess.check_call(command, shell=True)

    return subprocess.check_call(command, shell=True, stdout=subprocess.DEVNULL)


def backup_obsidian():
    check_dependencies('7z')

    password = Config.archive_password

    if not password:
        print(f'Please set "archive_password" variable in {CONFIG_PATH_RAW}')
        exit(1)
    else:
        placeholder = 'x' * len(password)
        print(f'Protecting backup archive with a password: {placeholder}')

    date = datetime.now().strftime('%Y%m%d%H%M')
    name = f'obsidian-backup-{date}.7z'
    backup_path = join(BACKUPS_PATH, 'obsidian', name)

    print(f'Archiving {name}...')
    shell(f'7z a "{backup_path}" "{OBSIDIAN_PATH}" -p"{password}"', verbose=False)
    print('Done')


def sync_ssh():
    check_dependencies('rsync')
    shell(f'rsync -a {BACKUPS_PATH}/ {REMOTE}:{REMOTE_BACKUPS_PATH}')
    print('Done')


def sync_drive():
    check_dependencies('rclone')
    shell(f'rclone copy {BACKUPS_PATH} drive:{GOOGLE_DRIVE_BACKUPS_PATH}')
    print('Done')


if __name__ == '__main__':
    Config.load(CONFIG_PATH)

    args = ' '.join(argv[1:]).strip()

    if args == 'archive':
        backup_obsidian()
    elif args == 'sync ssh':
        sync_ssh()
    elif args == 'sync drive':
        sync_drive()
    else:
        print(ASCII)
        print(USAGE)
        print()

