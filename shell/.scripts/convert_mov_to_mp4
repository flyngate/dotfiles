#!/usr/bin/env perl
use strict;
use warnings;
use Cwd 'abs_path';
use File::Basename;
use File::Copy;

sub list_files_with_extension() {
  my $raw_dir = shift or die "no directory specified";
  my $extension = shift;
  my $dir = abs_path($raw_dir);
  opendir(dir_handle, $dir) or die "Can't open $raw_dir";
  my @files = readdir(dir_handle);
  closedir(dir_handle);
  if ($extension) {
    grep { /\.\Q$extension\E$/i } @files;
  } else {
    @files;
  }
}

sub is_vertical_video() {
  # TODO: video can be vertical without rotate: 90
  my $path = shift;
  my @output = `ffprobe "$path" 2>&1`;
  join('', @output) =~ /rotate\s*:\s*90/;
}

sub encode_to_mp4() {
  my ($src, $dest) = @_;
  my $scale = &is_vertical_video($src) ? "720:-1" : "-1:720";
  `ffmpeg -y -i "$src" \\
          -c:v libx264 -preset slow -crf 22 -vf scale=$scale \\
          -c:a aac "$dest"`;
}

sub fix_created_modified_dates() {
  my ($src, $dest) = @_;
  `touch -r "$src" "$dest"`
}

if (not defined $ARGV[0]) {
  die "Usage: ./convert_mov_to_mp4 <dir>\n";
}

my $raw_dir = $ARGV[0];
my $dir = abs_path($raw_dir);
my $backup_dir = "$dir/MOV";

my @mov_files = sort(&list_files_with_extension($dir, "mov"));

if (not -d $backup_dir) {
  mkdir $backup_dir or die "Can't create $backup_dir";  
}

foreach my $name (@mov_files) {
  my $src = "$dir/$name";
  my $dest = $dir . "/" . ($name =~ s/mov$/mp4/igr);
  my $backup = "$backup_dir/$name";
  &encode_to_mp4($src, $dest);
  &fix_created_modified_dates($src, $dest);
  move($src, $backup);
}
