""" BASIC SETUP

filetype plugin indent on          " filetype detection and settings
syntax on                          " syntax highlighting
silent! runtime macros/matchit.vim " matchit comes with Vim
set nocompatible                   " not strictly necessary but useful in some scenarii
set backspace=indent,eol,start     " let the backspace key work "normally"
set hidden                         " hide unsaved buffers
set incsearch                      " incremental search rules
set laststatus=2                   " not strictly necessary but good for consistency
set ruler                          " shows line number in the status line
set switchbuf=useopen,usetab       " better behavior for the quickfix window and :sb
set tags=./tags;/,tags;/           " search tags files efficiently
set wildmenu                       " better command line completion, shows a list of matches
" quick buffer navigation
nnoremap gb :buffers<CR>:sb<Space>

" make a habbit to navigate using hjkl
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" show line numbers
set number

" indentation
set expandtab
set tabstop=2
set shiftwidth=2
autocmd FileType vim setlocal expandtab shiftwidth=2 softtabstop=2
autocmd FileType javascript setlocal expandtab shiftwidth=2 softtabstop=2

" aliases for navigating the buffers
nnoremap <silent> [b :bprevious<CR>
nnoremap <silent> ]b :bnext<CR>
nnoremap <silent> [B :bfirst<CR>
nnoremap <silent> ]B :blast<CR>

" press both k and j to exit insert mode
inoremap jk <esc>
inoremap kj <esc>

" change path var, affects gf, :find etc.
" ** is added to search recursively
set path=.,$HOME/.vim,**

" exclude node_module from search
set wildignore+=**/node_modules/**

" set suffixesadd to follow js imports with gf
set suffixesadd=.js,.jsx

" put all swap files into a single directory
set directory^=$HOME/.vim/swap//

" highlight search
" set hlsearch

" map leader+space to clear out search highlight
" nnoremap <leader><space> :noh<cr>

" ignore case when searching the file
" uppercase symbols make the search case sensitive
set ignorecase
set smartcase

" enable "very magic" regex mode everywhere
" :help /magic
" nnoremap / /\v
" vnoremap / /\v
" cnoremap %s/ %smagic/
" cnoremap \>s/ \>smagic/
" nnoremap :g/ :g/\v
" nnoremap :g// :g//

" global substitution by default
" i.e. :s/a/b works as :s/a/b/g
set gdefault

" when a bracket is inserted, briefly jump to the matching one
set showmatch

" config for netrw filebrowser
let g:netrw_banner=0
let g:netrw_altv=1
" let g:netrw_liststyle=3

" automatically reload buffer if the file has changed
" and the buffer has no changes unsaved
set autoread

" split windows config
set splitright
set splitbelow


""" MAPPINGS/ALIASES

" set leader to ,
let mapleader = ','

" map reverse t and f repeat to \
nnoremap \ ,

" map tab to % in normal and visual mode
" TODO this break C-i somehow
" nnoremap <tab> %
" vnoremap <tab> %

" map leader+w to vertical split
nnoremap <leader>w <C-w>v<C-w>l

" C-hjkl for window navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

nnoremap <leader>f :find<space>

" mapping for ack
cnoreabbrev Ack Ack!
nnoremap <leader>a :Ack! -w -Q<space>

" shortcut for :Explore
command! E Explore

" set %% as an alias for the directory of the current file
cabbr <expr> %% expand('%:p:h')

" update config
nnoremap <leader>cu :update<cr>:so ~/.vim/vimrc<cr>

" update plugins
nnoremap <leader>pu :update<cr>:so ~/.vim/vimrc<cr>:PlugUpdate<cr>

" mnemonic: Copy File path
nnoremap <leader>cf :let @*=expand("%:p")<cr>

" mnemonic: Yank File path
nnoremap <leader>yf :let @"=expand("%:p")<cr>

" mnemonic: yank File Name
nnoremap <leader>fn :let @"=expand("%")<cr>

" git blame
nnoremap <leader>bl :exe "!git blame -L " . line(".") . "," . line(".") . " " . expand("%:p")<cr>
vnoremap <leader>bl :<c-u>exe "!git blame -L " . line("'<") . "," . line("'>") . " " . expand("%:p")<cr>

""" SNIPPETS

" nnoremap ,html :-1read $HOME/.vim/.skeleton.html<CR>3jwf>a


""" PLUGINS

call plug#begin('~/.vim/plugins')

" color schemes
Plug 'nightsense/snow'
Plug 'phanviet/sidonia'
Plug 'iceisspetrel/monrovia'
Plug 'chriskempson/base16-vim'

Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-commentary'
Plug 'mattn/emmet-vim'
Plug 'junegunn/fzf', { 'do': './install --all', 'dir': '~/.vim/bin/fzf' }
Plug 'junegunn/fzf.vim'
Plug 'mileszs/ack.vim'

" Plug 'scrooloose/nerdtree'
Plug 'w0rp/ale'
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
" Plug 'flowtype/vim-flow'

Plug 'ElmCast/elm-vim'

call plug#end()

" vim-surround setup
" custom surround for jsx comments
autocmd FileType javascript.jsx let b:surround_45 = "{/* \r */}"

" ale setup
let g:ale_fixers = {
\   'javascript': ['prettier-eslint'],
\   'css': ['prettier-eslint'],
\}
let g:ale_linters = {
\   'javascript': ['eslint'],
\}
let g:ale_sign_error = '●' " Less aggressive than the default '>>'
let g:ale_sign_warning = '.'
let g:ale_fix_on_save = 1
let g:ale_lint_on_enter = 0 " Less distracting when opening a new file
let g:ale_javascript_prettier_eslint_options = '--single-quote --trailing-comma=all'
let g:ale_completion_enabled = 1 " Enable completion where available.

" mappings for jumping between linter errors
nmap <silent> [a <Plug>(ale_previous_wrap)
nmap <silent> ]a <Plug>(ale_next_wrap)

" fzf setup
let $FZF_DEFAULT_COMMAND = 'ag -g ""'
nnoremap <c-p> :FZF<cr>

" use ag for ack search if available
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

" vim-javascript setups
let g:javascript_plugin_flow = 1

" TODO
let g:jsx_ext_required = 0

""" GVIM/MACVIM

if has('gui_running')
  " hide toolbar in gvim
  " set guioptions-=T
  set guioptions=c

  " show a colored column at 80 characters
  set colorcolumn=80


  if !exists('g:vim_initialized')
     set lines=100 columns=120

     " font type and size setting.
     if has('win32')
       " set guifont=Consolas:h12
     elseif has('gui_macvim')
       set guifont=Source\ Code\ Pro\ Semibold:h14
       colorscheme monrovia
     else
       set guifont=Menlo\ 10.5
       if strftime('%H') >= 7 && strftime('%H') < 19
         set background=light
       else
         set background=dark
       endif
       colorscheme base16-atelier-cave-light
     endif
  endif
endif


" include vimrc.local if exists for system-specific setup
silent! source $HOME/.vim/vimrc.local

" use this variable to avoid applying settings twice when
" reloading vimrc with :so ~/.vim/vimrc
let g:vim_initialized = 1

