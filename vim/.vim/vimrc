""""""""""""""""""""""""""""""""
"
" PACKAGE MANAGEMENT
"
""""""""""""""""""""""""""""""""

call plug#begin('~/.vim/plugins')

" core pluging
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-vinegar'
Plug 'cohama/lexima.vim'
Plug 'kana/vim-textobj-user'
Plug 'fvictorio/vim-textobj-backticks'
Plug 'Julian/vim-textobj-variable-segment'

" visual
Plug 'ap/vim-css-color'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/vim-emoji'
" Plug 'itchyny/lightline.vim'
Plug 'nightsense/snow'
Plug 'phanviet/sidonia'
Plug 'iceisspetrel/monrovia'
Plug 'chriskempson/base16-vim'

" search
Plug 'mileszs/ack.vim'
Plug 'junegunn/fzf', { 'do': './install --all', 'dir': '~/.vim/bin/fzf' }
Plug 'junegunn/fzf.vim'
Plug 'Shougo/denite.nvim'

" linting / formatting
Plug 'w0rp/ale'

" autocomplete
" if has('nvim')
"   Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
" else
"   Plug 'Shougo/deoplete.nvim'
"   Plug 'roxma/nvim-yarp'
"   Plug 'roxma/vim-hug-neovim-rpc'
" endif
" Plug 'Valloric/YouCompleteMe'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'ervandew/supertab'

" snippets
Plug 'SirVer/ultisnips'

" vimscript
" TODO

" javascript
" Plug 'pangloss/vim-javascript'
" Plug 'mxw/vim-jsx'
Plug 'mattn/emmet-vim'
Plug 'othree/xml.vim'
" Plug 'neoclide/vim-jsx-improve'
Plug 'othree/yajs.vim'
Plug 'HerringtonDarkholme/yats.vim'
Plug 'ElmCast/elm-vim'

" css
Plug 'hail2u/vim-css3-syntax'
" Plug 'styled-components/vim-styled-components', { 'branch': 'main' }

" python
Plug 'bps/vim-textobj-python'

" file types
Plug 'plasticboy/vim-markdown'
Plug 'jparise/vim-graphql'
Plug 'chr4/nginx.vim'

" tmux integration
Plug 'christoomey/vim-tmux-navigator'

call plug#end()

""""""""""""""""""""""""""""""""
"
" SETTINGS & KEYBINDINGS
"
""""""""""""""""""""""""""""""""
filetype plugin indent on          " filetype detection and settings
syntax on                          " syntax highlighting
silent! runtime macros/matchit.vim " matchit comes with Vim
set nocompatible                   " not strictly necessary but useful in some scenarii
set backspace=indent,eol,start     " let the backspace key work "normally"
set hidden                         " hide unsaved buffers
set incsearch                      " incremental search rules
set laststatus=2                   " not strictly necessary but good for consistency
set ruler                          " shows line number in the status line
set switchbuf=useopen,usetab       " better behavior for the quickfix window and :sb
set tags=./tags;/,tags;/           " search tags files efficiently
set wildmenu                       " better command line completion, shows a list of matches
set noerrorbells                   " no beeps
set showcmd                        " show me what I'm typing
set nohlsearch
set mouse=a

set backupcopy=yes

" show line numbers
set number
set relativenumber

" don't show mode since we have lightline
" set noshowmode

" indentation
set expandtab
set tabstop=2
set shiftwidth=2
autocmd FileType vim setlocal expandtab shiftwidth=2 softtabstop=2

" when editing a file, always jump to the last known cursor position.
" don't do it for commit messages, when the position is invalid, or when
" inside an event handler (happens when dropping a file on gvim)
augroup remember_position
  autocmd!
  autocmd BufReadPost *
    \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
    \   execute "normal g`\"" |
    \ endif
augroup END

" make a habbit to navigate using hjkl
noremap <up> <nop>
noremap <down> <nop>
noremap <left> <nop>
noremap <right> <nop>

" aliases for navigating the buffers
nnoremap <silent> [b :bprevious<cr>
nnoremap <silent> ]b :bnext<cr>
nnoremap <silent> [B :bfirst<cr>
nnoremap <silent> ]B :blast<cr>

" change path var, affects gf, :find etc.
" ** is added to search recursively
set path=.,$HOME/.vim,**

" exclude node_module from search
set wildignore+=**/node_modules/**

" set suffixesadd to follow js imports with gf
set suffixesadd=.js,.jsx,.ts,.tsx

" put all swap files into a single directory
set directory^=$HOME/.vim/swap//

" ignore case when searching the file
" uppercase symbols make the search case sensitive
set ignorecase
set smartcase

" global substitution by default
set gdefault

" config for netrw filebrowser
let g:netrw_banner=0
let g:netrw_altv=1

" automatically reload buffer if the file has changed
" and the buffer has no changes unsaved
set autoread

" split windows config
set splitright
set splitbelow

" Keep search matches in the middle of the window.
" nnoremap n nzzzv
" nnoremap N Nzzzv

" */# searches current selection in visual mode
function! s:VSetSearch(cmdtype)
  let temp = @s
  norm! gv"sy
  let @/ = '\V' . substitute(escape(@s, a:cmdtype.'\'), '\n', '\\n', 'g')
  let @s = temp
endfunction
xnoremap * :<C-u>call <SID>VSetSearch('/')<CR>/<C-R>=@/<CR><CR>
xnoremap # :<C-u>call <SID>VSetSearch('?')<CR>?<C-R>=@/<CR><CR>

" makes it easy to run a macro over multiple lines
function! ExecuteMacroOverVisualRange()
  echo "@".getcmdline()
  execute ":'<,'>normal @".nr2char(getchar())
endfunction
xnoremap @ :<C-u>call ExecuteMacroOverVisualRange()<CR>

" quickly jump between tabs on mac os using command+number
map <D-S-]> gt
map <D-S-[> gT
map <D-1> 1gt
map <D-2> 2gt
map <D-3> 3gt
map <D-4> 4gt
map <D-5> 5gt
map <D-6> 6gt
map <D-7> 7gt
map <D-8> 8gt
map <D-9> 9gt
map <D-0> :tablast<CR>

" NOTE: this is disabled because vim-tmux-navigator provides the same functionality
" C-hjkl for window navigation
" nnoremap <C-h> <C-w>h
" nnoremap <C-j> <C-w>j
" nnoremap <C-k> <C-w>k
" nnoremap <C-l> <C-w>l

" bubble lines / visual selections up and down
nmap <c-up> [e==
nmap <c-down> ]e==
vmap <c-up> [egv=gv
vmap <c-down> ]egv=gv

" set %% as an alias for the directory of the current file
cabbr <expr> %% expand('%:p:h')

" visual reselect of just pasted
nnoremap gp `[v`]

" search for default register content
nnoremap g" /\v<<C-r>"><CR>

" shortcut for :Explore
command! E Explore

command! ClearSwap !rm ~/.vim/swap/*

" set leader to ,
let mapleader = "\<space>"

" map tab to % in normal and visual mode
" TODO this breaks C-i somehow
" nnoremap <tab> %
" vnoremap <tab> %

" vim config
nnoremap <leader>c :e ~/.vim/vimrc<cr>
nnoremap <leader>C :tabnew ~/.vim/vimrc<cr>

" leader shortcut for :Explore
nnoremap <leader>e :Explore<cr>

" mappings for creating splits
nnoremap <leader>v <C-w>v<C-w>l
nnoremap <leader>s <C-w>s<C-w>l

" fzf aliases
nnoremap <leader>a :Ag<space>
nnoremap <leader>sg :GFiles<cr>
nnoremap <leader>sG :GFiles?<cr>
nnoremap <leader>st :Tags<cr>
nnoremap <leader>sT :BTags<cr>
nnoremap <leader>sc :Colors<cr>

" zen mode
nnoremap <leader>z :Goyo<cr>

" update config
nnoremap <leader>uc :update<cr>:so ~/.vim/vimrc<cr>

" update plugins
nnoremap <leader>up :update<cr>:so ~/.vim/vimrc<cr>:PlugUpdate<cr>

" mnemonic: Copy File path
" nnoremap <leader>cf :let @+=expand("%:p")<cr>

" mnemonic: Yank File path
" nnoremap <leader>yf :let @"=expand("%:p")<cr>

" mnemonic: yank File Name
" nnoremap <leader>fn :let @"=expand("%")<cr>

""""""""""""""""""""""""""""""""
"
" SEARCH
"
""""""""""""""""""""""""""""""""

if executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor
  command! -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
  nnoremap \ :Ag -Q<space>
else
  echoe 'Install "ag" for sane :Ag command search'
endif


""""""""""""""""""""""""""""""""
"
" LINTERS / FORMATTERS
"
""""""""""""""""""""""""""""""""

let g:ale_fixers = {
\   'javascript': ['prettier-eslint'],
\   'css': ['prettier-eslint'],
\   'scss': ['prettier'],
\   'html': ['prettier'],
\   'htmldjango': ['prettier'],
\}
let g:ale_linters = {
\   'javascript': ['eslint'],
\   'python': ['flake8'],
\}
" let g:ale_sign_error = '●' " Less aggressive than the default '>>'
" let g:ale_sign_warning = '.'
let g:ale_fix_on_save = 1
" let g:ale_lint_on_enter = 0 " Less distracting when opening a new file
let g:ale_lint_on_enter = 1
let g:ale_javascript_prettier_eslint_options = '--single-quote --trailing-comma=all'
" let g:ale_completion_enabled = 1 " Enable completion where available.
let g:ale_sign_column_always = 1
let g:ale_lint_on_text_changed = 'never'

" move between linting errors
nmap <silent> [r :ALEPreviousWrap<cr>
nmap <silent> ]r :ALENextWrap<cr>

" ALE linting events
augroup ale
  autocmd!

  autocmd VimEnter *
    \ set updatetime=1000 |
    \ let g:ale_lint_on_text_changed = 0
  autocmd CursorHold * call ale#Queue(0)
  autocmd CursorHoldI * call ale#Queue(0)
  autocmd InsertEnter * call ale#Queue(0)
  autocmd InsertLeave * call ale#Queue(0)
augroup END

" coc-prettier
vmap <leader>f <Plug>(coc-format-selected)
nmap <leader>f <Plug>(coc-format-selected)


""""""""""""""""""""""""""""""""
"
" AUTOCOMPLETION
"
""""""""""""""""""""""""""""""""

" deoplete
" let g:deoplete#enable_at_startup = 1

" Example:
" call deoplete#custom#option('sources', {
"   \ '_': ['buffer', 'omni'],
"   \})

" tab completion
" will insert tab at beginning of line,
" will use completion if not at beginning
" set wildmode=list:longest,list:full
" function! InsertTabWrapper()
"     let col = col('.') - 1
"     if !col || getline('.')[col - 1] !~ '\k'
"         return "\<Tab>"
"     else
"         return "\<C-p>"
"     endif
" endfunction
" inoremap <Tab> <C-r>=InsertTabWrapper()<CR>
" inoremap <S-Tab> <C-n>

nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

let g:SuperTabDefaultCompletionType = '<c-n>'

let g:ycm_max_num_candidates = 10
let g:ycm_max_num_identifier_candidates = 5
let g:ycm_autoclose_preview_window_after_completion = 1


""""""""""""""""""""""""""""""""
"
" FILE TYPES
"
""""""""""""""""""""""""""""""""

""" JS / JavaScript

" vim-javascript setups
" let g:javascript_plugin_flow = 1

augroup js
  autocmd!
  autocmd FileType javascript setlocal expandtab shiftwidth=2 softtabstop=2
  autocmd FileType javascript let b:surround_45 = "{/* \r */}"
  autocmd FileType javascript nmap <buffer> <c-]> :YcmCompleter GoTo<cr>
augroup END

" TODO
let g:jsx_ext_required = 0

""" PYTHON

""" MARKDOWN
let g:vim_markdown_folding_disabled = 1

augroup emoji_complete
  autocmd!
  autocmd FileType markdown setlocal completefunc=emoji#complete
augroup END


""""""""""""""""""""""""""""""""
"
" OTHER PLUGINS
"
""""""""""""""""""""""""""""""""

" lightline
let g:lightline = {
  \ 'separator': { 'left': '▓▒░', 'right': '░▒▓' },
  \ 'subseparator': { 'left': '>', 'right': '' },
  \}

" vim-textobj-backticks: make ii` the default behavior
omap i` if`
xmap i` if`
omap a` af`
xmap a` af`

" delimitMate
let delimitMate_expand_cr = 1

" ack.vim
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

" fzf
let $FZF_DEFAULT_COMMAND = 'ag -g ""'
nnoremap <c-p> :FZF<cr>

" ultisnips
let g:UltiSnipsSnippetDirectories=['UltiSnips', 'ultisnips']
let g:UltiSnipsExpandTrigger='<c-a>'
let g:UltiSnipsJumpForwardTrigger='<tab>'
let g:UltiSnipsJumpBackwardTrigger='<s-tab>'

" gutentags
let g:gutentags_enabled = 1
let g:gutentags_project_root = ['package.json']
let g:gutentags_ctags_exclude = ['node_modules', 'dist', '.git', '*.json', '*.md', '*bundle.js', '*bundle.css']


""""""""""""""""""""""""""""""""
"
" GUI and colors
"
""""""""""""""""""""""""""""""""

if has('gui_running')
  " hide toolbar in gvim
  " set guioptions-=T
  set guioptions=c

  " show a colored column at 80 characters
  set colorcolumn=80

  if !exists('g:vim_initialized')
    set lines=100 columns=120
  endif
endif

" fixes colors in terminal
if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif


""""""""""""""""""""""""""""""""
"
" BUG WORKAROUNDS
"
""""""""""""""""""""""""""""""""

" realign buffers on resize
augroup FixProportionsOnResize
  au!
  au VimResized * exe "normal! \<c-w>="
augroup END

" make C-a, C-x work properly
set nrformats=

" fix esc in terminal mode
if has('nvim')
  augroup fix_terminal_escape
    autocmd!
    autocmd TermOpen * tnoremap <esc> <c-\><c-n>
    autocmd FileType fzf tunmap <esc>
      \| autocmd BufLeave <buffer> tnoremap <esc> <c-\><c-n>
  augroup END
endif

" always open quickfix at the bottom of the screen
augroup qfbottom
  autocmd!
  autocmd FileType qf wincmd J
augroup END

" vimscript autocompletion ends up broken at this point somehow...
" remap the keystroke to itself to fix it
imap <c-x><c-v> <c-x><c-v>

" macos vs linux clipboard
if has("mac")
  set clipboard+=unnamed
else
  set clipboard=unnamedplus
endif


""""""""""""""""""""""""""""""""
"
" INIT
"
""""""""""""""""""""""""""""""""

" include vimrc.local if exists for system-specific setup
source $HOME/.vim/vimrc.local

" use this variable to avoid applying settings twice when
" reloading vimrc with :so ~/.vim/vimrc
let g:vim_initialized = 1

