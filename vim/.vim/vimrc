""""""""""""""""""""""""""""""""
"
" PACKAGE MANAGEMENT
"
""""""""""""""""""""""""""""""""

call plug#begin('~/.vim/plugins')

" experimental
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'nvim-treesitter/nvim-treesitter-textobjects'
Plug 'voldikss/vim-floaterm'

" core pluging
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-vinegar'
Plug 'jiangmiao/auto-pairs'
Plug 'flyngate/vim-closetag'
Plug 'kana/vim-textobj-user'
Plug 'fvictorio/vim-textobj-backticks'
Plug 'Julian/vim-textobj-variable-segment'

" tmux integration
Plug 'christoomey/vim-tmux-navigator'

" colors schemes
Plug 'chriskempson/base16-vim'
Plug 'arzg/vim-colors-xcode'
Plug 'phanviet/sidonia'
Plug 'iceisspetrel/monrovia'
Plug 'sam4llis/nvim-tundra', { 'branch': 'main' }

" visuals
Plug 'ap/vim-css-color'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/vim-emoji'

" navigation
Plug 'preservim/nerdtree'

" search
Plug 'dyng/ctrlsf.vim'
Plug 'junegunn/fzf', { 'do': './install --all', 'dir': '~/.vim/bin/fzf' }
Plug 'junegunn/fzf.vim'
Plug 'ibhagwan/fzf-lua', {'branch': 'main'}

" lsp / autocomplete
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" Plug 'ervandew/supertab'

" snippets
Plug 'SirVer/ultisnips'
Plug 'mattn/emmet-vim'

" javascript
" Plug 'othree/yajs.vim'
" Plug 'HerringtonDarkholme/yats.vim'
" Plug 'MaxMEllon/vim-jsx-pretty'
" Plug 'samuelsimoes/vim-jsx-utils'

" programming languages
Plug 'udalov/kotlin-vim'
Plug 'adelarsq/neofsharp.vim'

" file types
" Plug 'hail2u/vim-css3-syntax'
Plug 'othree/xml.vim'
Plug 'plasticboy/vim-markdown'
Plug 'jxnblk/vim-mdx-js'
Plug 'chr4/nginx.vim'

call plug#end()

set completeopt=menu,menuone,noselect

" treesitter
lua << EOF
require'nvim-treesitter.configs'.setup {
  enable = true,
  auto_install = true,

  ensure_installed = {
    "javascript",
    "typescript",
    "tsx",
    "python",
    "lua",
  },

  highlight = { enable = true },

  indent = { enable = true },

  incremental_selection = {
    enable = true,
    keymaps = {
      init_selection = "<m-o>",
      node_incremental = "<m-o>",
    },
  },

  textobjects = {
    swap = {
      enable = true,
      swap_next = {
        ["]s"] = "@parameter.inner",
      },
      swap_previous = {
        ["[s"] = "@parameter.inner",
      },
    },
  },
}
EOF

" c#
autocmd FileType cs setlocal shiftwidth=4 softtabstop=4 expandtab

""""""""""""""""""""""""""""""""
"
" SETTINGS & KEYBINDINGS
"
""""""""""""""""""""""""""""""""
filetype plugin indent on          " filetype detection and settings
syntax on                          " syntax highlighting
silent! runtime macros/matchit.vim " matchit comes with Vim
set nocompatible                   " not strictly necessary but useful in some scenarii
set backspace=indent,eol,start     " let the backspace key work "normally"
set hidden                         " hide unsaved buffers
set incsearch                      " incremental search rules
set laststatus=2                   " not strictly necessary but good for consistency
set ruler                          " shows line number in the status line
set switchbuf=useopen,usetab       " better behavior for the quickfix window and :sb
set tags=./tags;/,tags;/           " search tags files efficiently
set wildmenu                       " better command line completion, shows a list of matches
set noerrorbells                   " no beeps
set showcmd                        " show me what I'm typing
set nohlsearch
set mouse=a

set backupcopy=yes

" show line numbers
set number
set relativenumber

" don't show mode since we have lightline
" set noshowmode

" indentation
set expandtab
set tabstop=2
set shiftwidth=2
autocmd FileType vim setlocal expandtab shiftwidth=2 softtabstop=2

" when editing a file, always jump to the last known cursor position.
" don't do it for commit messages, when the position is invalid, or when
" inside an event handler (happens when dropping a file on gvim)
augroup remember_position
  autocmd!
  autocmd BufReadPost *
    \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
    \   execute "normal g`\"" |
    \ endif
augroup END

" make a habbit to navigate using hjkl
noremap <up> <nop>
noremap <down> <nop>
noremap <left> <nop>
noremap <right> <nop>

" aliases for navigating the buffers
nnoremap <silent> [b :bprevious<cr>
nnoremap <silent> ]b :bnext<cr>
nnoremap <silent> [B :bfirst<cr>
nnoremap <silent> ]B :blast<cr>

" change path var, affects gf, :find etc.
" ** is added to search recursively
set path=.,$HOME/.vim,**

" exclude node_module from search
set wildignore+=**/node_modules/**

" set suffixesadd to follow js imports with gf
set suffixesadd=.js,.jsx,.ts,.tsx

" put all swap files into a single directory
set directory^=$HOME/.vim/swap//

" ignore case when searching the file
" uppercase symbols make the search case sensitive
set ignorecase
set smartcase

" global substitution by default
set gdefault

" config for netrw filebrowser
let g:netrw_banner=0
let g:netrw_altv=1

" automatically reload buffer if the file has changed
" and the buffer has no changes unsaved
set autoread
augroup checktime
  au CursorHold * checktime
augroup END

" split windows config
set splitright
set splitbelow

" Keep search matches in the middle of the window.
" nnoremap n nzzzv
" nnoremap N Nzzzv

" */# searches current selection in visual mode
function! s:VSetSearch(cmdtype)
  let temp = @s
  norm! gv"sy
  let @/ = '\V' . substitute(escape(@s, a:cmdtype.'\'), '\n', '\\n', 'g')
  let @s = temp
endfunction
xnoremap * :<C-u>call <SID>VSetSearch('/')<CR>/<C-R>=@/<CR><CR>
xnoremap # :<C-u>call <SID>VSetSearch('?')<CR>?<C-R>=@/<CR><CR>

" makes it easy to run a macro over multiple lines
function! ExecuteMacroOverVisualRange()
  echo "@".getcmdline()
  execute ":'<,'>normal @".nr2char(getchar())
endfunction
xnoremap @ :<C-u>call ExecuteMacroOverVisualRange()<CR>

" quickly jump between tabs on mac os using command+number
map <D-S-]> gt
map <D-S-[> gT
map <D-1> 1gt
map <D-2> 2gt
map <D-3> 3gt
map <D-4> 4gt
map <D-5> 5gt
map <D-6> 6gt
map <D-7> 7gt
map <D-8> 8gt
map <D-9> 9gt
map <D-0> :tablast<CR>

" NOTE: this is disabled because vim-tmux-navigator provides the same functionality
" C-hjkl for window navigation
" nnoremap <C-h> <C-w>h
" nnoremap <C-j> <C-w>j
" nnoremap <C-k> <C-w>k
" nnoremap <C-l> <C-w>l

" bubble lines / visual selections up and down
nmap <m-k> [e==
nmap <m-j> ]e==
vmap <m-k> [egv=gv
vmap <m-j> ]egv=gv

" set %% as an alias for the directory of the current file
cabbr <expr> %% expand('%:p:h')

" visual reselect of just pasted
nnoremap gp `[v`]

" search for default register content
nnoremap g" /\v<<C-r>"><CR>

command! ClearSwap !rm ~/.vim/swap/*

" set leader to space
let mapleader = "\<space>"

" map tab to % in normal and visual mode
" TODO this breaks C-i somehow
" nnoremap <tab> %
" vnoremap <tab> %

" vim config
nnoremap <leader>c :e ~/.vim/nvimrc<cr>
nnoremap <leader>C :CocConfig<cr>

" tabs
nnoremap <m-h> gT
nnoremap <m-l> gt
nnoremap <m-w> :tabc<cr>
nnoremap <m-t> :tabnew<cr>

" zen mode
nnoremap <leader>z :Goyo<cr>

" update config
nnoremap <leader>uc :update<cr>:so ~/.vim/nvimrc<cr>

" update plugins
nnoremap <leader>up :update<cr>:so ~/.vim/nvimrc<cr>:PlugUpdate<cr>

" floaterm
nnoremap <leader>t :FloatermToggle<cr>

" vim sessions
" let g:session_dir = '~/.vim/sessions'
" exec 'nnoremap <Leader>sw :mks! ' . g:session_dir . '/*.vim<C-D><BS><BS><BS><BS><BS>'
" exec 'nnoremap <Leader>sr :so ' . g:session_dir. '/*.vim<C-D><BS><BS><BS><BS><BS>'


""""""""""""""""""""""""""""""""
"
" SEARCH
"
""""""""""""""""""""""""""""""""

nmap <leader>a <Plug>CtrlSFPrompt
nmap <leader>s <Plug>CtrlSFCCwordPath
vmap <leader>s <Plug>CtrlSFVwordExec
nmap <leader>A :CtrlSFToggle<cr>

let g:ctrlsf_auto_focus = {
  \ "at": "start"
  \ }
let g:ctrlsf_populate_qflist = 1


""""""""""""""""""""""""""""""""
"
" NAVIGATION
"
""""""""""""""""""""""""""""""""

let NERDTreeQuitOnOpen=1
nnoremap <c-n> :NERDTreeToggle<cr>
nnoremap - :NERDTreeFind<cr>

command! Ch :FzfLua git_branches

nnoremap <leader>b :Buffers<cr>
" nnoremap <leader>h :History<cr>
nnoremap <leader>h :FzfLua oldfiles<cr>
nnoremap <leader>g :GFiles?<cr>
nnoremap <leader>F :Files %:p:h<cr>

augroup nerdtree
  autocmd!
  autocmd FileType nerdtree map <buffer> - u
  autocmd FileType nerdtree unmap <buffer> CD
augroup END


""""""""""""""""""""""""""""""""
"
" AUTOCOMPLETION
"
""""""""""""""""""""""""""""""""

let g:SuperTabDefaultCompletionType = '<c-n>'


""""""""""""""""""""""""""""""""
"
" FILE TYPES
"
""""""""""""""""""""""""""""""""

""" JavaScript / JSX

augroup js
  autocmd!
  autocmd FileType javascript setlocal expandtab shiftwidth=2 softtabstop=2
  nnoremap cst< :call JSXChangeTagPrompt()<cr>
augroup END

""" MARKDOWN
let g:vim_markdown_folding_disabled = 1

augroup emoji_complete
  autocmd!
  autocmd FileType markdown setlocal completefunc=emoji#complete
augroup END


""""""""""""""""""""""""""""""""
"
" OTHER PLUGINS
"
""""""""""""""""""""""""""""""""

" vim-auto-pairs
" let g:AutoPairsFlyMode = 1
let g:AutoPairsCompleteOnlyOnSpace = 1

" vim-closetag
" let g:closetag_filetypes = 'html,xhtml,phtml,js,jsx,tsx'
let g:closetag_filenames = '*.html,*.xhtml,*.phtml,*.js,*.jsx,*.tsx'
let g:closetag_xhtml_filetypes = 'xhtml,jsx,tsx'
let g:closetag_emptyTags_caseSensitive = 1

" lightline
let g:lightline = {
  \ 'separator': { 'left': '▓▒░', 'right': '░▒▓' },
  \ 'subseparator': { 'left': '>', 'right': '' },
  \}

" vim-textobj-backticks: make ii` the default behavior
omap i` if`
xmap i` if`
omap a` af`
xmap a` af`

" fzf
let $BAT_THEME='OneHalfLight'
let $FZF_DEFAULT_COMMAND = 'ag -g ""'
" nnoremap <c-p> :FZF<cr>
nnoremap <c-p> :FzfLua files<cr>

" ultisnips
let g:UltiSnipsSnippetDirectories=['ultisnips']
let g:UltiSnipsExpandTrigger='<c-l>'
let g:UltiSnipsJumpForwardTrigger='<tab>'
let g:UltiSnipsJumpBackwardTrigger='<s-tab>'


""""""""""""""""""""""""""""""""
"
" GUI and colors
"
""""""""""""""""""""""""""""""""

if has('gui_running')
  " hide toolbar in gvim
  " set guioptions-=T
  set guioptions=c

  " show a colored column at 80 characters
  set colorcolumn=80

  if !exists('g:vim_initialized')
    set lines=100 columns=120
  endif
endif

" fixes colors in terminal
if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

colorscheme tundra

""""""""""""""""""""""""""""""""
"
" COC
"
""""""""""""""""""""""""""""""""
let g:coc_global_extensions = [
  \ "coc-tsserver",
  \ "coc-prettier",
  \ "coc-eslint",
  \ "coc-sourcekit",
  \ "coc-rust-analyzer",
  \ "coc-clangd"
  \ ]
" let g:coc_node_path = '/Users/igor/.nvm/versions/node/v12.13.0/bin/node'

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1):
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()

inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

nmap <silent> [r <Plug>(coc-diagnostic-prev)
nmap <silent> ]r <Plug>(coc-diagnostic-next)
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

nnoremap <leader>x :CocCommand<cr>
nnoremap <leader>k <Plug>(coc-codeaction)
nnoremap <leader>e :CocList extensions<cr>
nnoremap <leader>rn <Plug>(coc-rename)

vmap <leader>f <Plug>(coc-format-selected)
nmap <leader>f :call CocActionAsync('format')<cr>

" vmap <leader>f :CocCommand prettier.formatFile<cr>
" nmap <leader>f :CocCommand prettier.formatFile<cr>


""""""""""""""""""""""""""""""""
"
" BUG WORKAROUNDS
"
""""""""""""""""""""""""""""""""

" realign buffers on resize
augroup FixProportionsOnResize
  au!
  au VimResized * exe "normal! \<c-w>="
augroup END

" make C-a, C-x work properly
set nrformats=

" fix esc in terminal mode
if has('nvim')
  augroup fix_terminal_escape
    autocmd!
    autocmd TermOpen * tnoremap <esc> <c-\><c-n>
    autocmd FileType fzf tunmap <esc>
      \| autocmd BufLeave <buffer> tnoremap <esc> <c-\><c-n>
  augroup END
endif

" always open quickfix at the bottom of the screen
augroup qfbottom
  autocmd!
  autocmd FileType qf wincmd J
augroup END

" vimscript autocompletion ends up broken at this point somehow...
" remap the keystroke to itself to fix it
imap <c-x><c-v> <c-x><c-v>

" macos vs linux clipboard
if has("mac")
  set clipboard+=unnamed
else
  set clipboard=unnamedplus
endif


""""""""""""""""""""""""""""""""
"
" INIT
"
""""""""""""""""""""""""""""""""

" include vimrc.local if exists for system-specific setup
source $HOME/.vim/vimrc.local

" use this variable to avoid applying settings twice when
" reloading vimrc with :so ~/.vim/vimrc
let g:vim_initialized = 1
