""" BASIC SETUP

filetype plugin indent on          " filetype detection and settings
syntax on                          " syntax highlighting
silent! runtime macros/matchit.vim " matchit comes with Vim
set nocompatible                   " not strictly necessary but useful in some scenarii
set backspace=indent,eol,start     " let the backspace key work "normally"
set hidden                         " hide unsaved buffers
set incsearch                      " incremental search rules
set laststatus=2                   " not strictly necessary but good for consistency
set ruler                          " shows line number in the status line
set switchbuf=useopen,usetab       " better behavior for the quickfix window and :sb
set tags=./tags;/,tags;/           " search tags files efficiently
set wildmenu                       " better command line completion, shows a list of matches
set noerrorbells                   " no beeps
set showcmd                        " show me what I'm typing

" show line numbers
set number
set relativenumber

" don't show mode since we have lightline
set noshowmode

" indentation
set expandtab
set tabstop=2
set shiftwidth=2
autocmd FileType vim setlocal expandtab shiftwidth=2 softtabstop=2
autocmd FileType javascript setlocal expandtab shiftwidth=2 softtabstop=2

" quick buffer navigation
" nnoremap gb :buffers<CR>:sb<Space>

" make a habbit to navigate using hjkl
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" aliases for navigating the buffers
nnoremap <silent> [b :bprevious<CR>
nnoremap <silent> ]b :bnext<CR>
nnoremap <silent> [B :bfirst<CR>
nnoremap <silent> ]B :blast<CR>

" press both k and j to exit insert mode
" inoremap jk <esc>
" inoremap kj <esc>

" change path var, affects gf, :find etc.
" ** is added to search recursively
set path=.,$HOME/.vim,**

" exclude node_module from search
set wildignore+=**/node_modules/**

" set suffixesadd to follow js imports with gf
set suffixesadd=.js,.jsx,.ts,.tsx

" setup autocomplete for included files (^x^i) for js imports
" autocmd FileType javascript set include=^\s*import.*from\ '\zs.*\ze'

" put all swap files into a single directory
set directory^=$HOME/.vim/swap//

" ignore case when searching the file
" uppercase symbols make the search case sensitive
set ignorecase
set smartcase

" global substitution by default
set gdefault

" config for netrw filebrowser
let g:netrw_banner=0
let g:netrw_altv=1
" let g:netrw_liststyle=3

" automatically reload buffer if the file has changed
" and the buffer has no changes unsaved
set autoread

" split windows config
set splitright
set splitbelow

" */# searches current selection in visual mode
function! s:VSetSearch(cmdtype)
  let temp = @s
  norm! gv"sy
  let @/ = '\V' . substitute(escape(@s, a:cmdtype.'\'), '\n', '\\n', 'g')
  let @s = temp
endfunction
xnoremap * :<C-u>call <SID>VSetSearch('/')<CR>/<C-R>=@/<CR><CR>
xnoremap # :<C-u>call <SID>VSetSearch('?')<CR>?<C-R>=@/<CR><CR>

" makes it easy to run a macro over multiple lines
function! ExecuteMacroOverVisualRange()
  echo "@".getcmdline()
  execute ":'<,'>normal @".nr2char(getchar())
endfunction
xnoremap @ :<C-u>call ExecuteMacroOverVisualRange()<CR>

" quickly jump between tabs on mac os using command+number
map <D-S-]> gt
map <D-S-[> gT
map <D-1> 1gt
map <D-2> 2gt
map <D-3> 3gt
map <D-4> 4gt
map <D-5> 5gt
map <D-6> 6gt
map <D-7> 7gt
map <D-8> 8gt
map <D-9> 9gt
map <D-0> :tablast<CR>

" C-hjkl for window navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" bubble lines / visual selections up and down
nmap <c-up> [e==
nmap <c-down> ]e==
vmap <c-up> [egv=gv
vmap <c-down> ]egv=gv

" set %% as an alias for the directory of the current file
cabbr <expr> %% expand('%:p:h')

" shortcut for :Explore
command! E Explore

" uppercase the word under the cursor
inoremap <C-l><C-u> <esc>:<c-u>normal mzgUiw`z<cr>a

command ClearSwap !rm ~/.vim/swap/*

" set leader to ,
let mapleader = "\<space>"

" map tab to % in normal and visual mode
" TODO this breaks C-i somehow
" nnoremap <tab> %
" vnoremap <tab> %

" map leader+w to vertical split
nnoremap <leader>w <C-w>v<C-w>l

" find alias
nnoremap <leader>f :find<space>

" ag alias
nnoremap <leader>a :Ag<space>

" update config
nnoremap <leader>uc :update<cr>:so ~/.vim/vimrc<cr>

" update plugins
nnoremap <leader>up :update<cr>:so ~/.vim/vimrc<cr>:PlugUpdate<cr>

" mnemonic: Copy File path
nnoremap <leader>cf :let @*=expand("%:p")<cr>

" mnemonic: Yank File path
nnoremap <leader>yf :let @"=expand("%:p")<cr>

" mnemonic: yank File Name
nnoremap <leader>fn :let @"=expand("%")<cr>


""" PLUGINS

call plug#begin('~/.vim/plugins')

" color schemes
Plug 'nightsense/snow'
Plug 'phanviet/sidonia'
Plug 'iceisspetrel/monrovia'
Plug 'chriskempson/base16-vim'
Plug 'junegunn/goyo.vim'
Plug 'itchyny/lightline.vim'

Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-abolish'
Plug 'Raimondi/delimitMate'

Plug 'w0rp/ale'
Plug 'SirVer/ultisnips'

if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif

Plug 'junegunn/fzf', { 'do': './install --all', 'dir': '~/.vim/bin/fzf' }
Plug 'junegunn/fzf.vim'

" Plug 'pangloss/vim-javascript'
" Plug 'mxw/vim-jsx'
Plug 'mattn/emmet-vim'
Plug 'othree/xml.vim'
Plug 'neoclide/vim-jsx-improve'

Plug 'ElmCast/elm-vim'

call plug#end()

" vim-surround setup
" custom surround for jsx comments
autocmd FileType javascript.jsx let b:surround_45 = "{/* \r */}"

" delimitMate
let delimitMate_expand_cr = 1

" deoplete setup
let g:deoplete#enable_at_startup = 1

" ale setup
let g:ale_fixers = {
\   'javascript': ['prettier-eslint'],
\   'css': ['prettier-eslint'],
\}
let g:ale_linters = {
\   'javascript': ['eslint', 'flow'],
\   'python': ['flake8'],
\}
" let g:ale_sign_error = '●' " Less aggressive than the default '>>'
" let g:ale_sign_warning = '.'
let g:ale_fix_on_save = 1
let g:ale_lint_on_enter = 0 " Less distracting when opening a new file
let g:ale_javascript_prettier_eslint_options = '--single-quote --trailing-comma=all'
let g:ale_completion_enabled = 1 " Enable completion where available.
let g:ale_sign_column_always = 1
let g:ale_lint_on_text_changed = 'never'

" move between linting errors
nmap <silent> [r :ALEPreviousWrap<cr>
nmap <silent> ]r :ALENextWrap<cr>

" fzf setup
let $FZF_DEFAULT_COMMAND = 'ag -g ""'
nnoremap <c-p> :FZF<cr>

" vim-javascript setups
" let g:javascript_plugin_flow = 1

" TODO
let g:jsx_ext_required = 0

" ultisnip
let g:UltiSnipsSnippetDirectories=['UltiSnips', 'ultisnips']
let g:UltiSnipsExpandTrigger='<tab>'
let g:UltiSnipsJumpForwardTrigger='<tab>'
let g:UltiSnipsJumpBackwardTrigger='<s-tab>'


""" GVIM/MACVIM

if has('gui_running')
  " hide toolbar in gvim
  " set guioptions-=T
  set guioptions=c

  " show a colored column at 80 characters
  set colorcolumn=80

  if !exists('g:vim_initialized')
    set lines=100 columns=120
  endif
endif

" fixes colors in terminal
if !has('gui_running')
  set t_Co=256
endif

" include vimrc.local if exists for system-specific setup
silent! source $HOME/.vim/vimrc.local

" use this variable to avoid applying settings twice when
" reloading vimrc with :so ~/.vim/vimrc
let g:vim_initialized = 1

